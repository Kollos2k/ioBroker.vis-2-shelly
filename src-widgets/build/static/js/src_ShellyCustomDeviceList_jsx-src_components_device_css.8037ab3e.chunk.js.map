{"version":3,"file":"static/js/src_ShellyCustomDeviceList_jsx-src_components_device_css.8037ab3e.chunk.js","mappings":"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","sources":["ShellyCustomDeviceList.jsx","../node_modules/react/cjs/react-jsx-runtime.production.min.js","../node_modules/react/jsx-runtime.js"],"sourcesContent":["import React from \"react\";\nimport { Card, CardContent, TextField, Select, Option } from \"@mui/material\";\n\nimport { I18n, ObjectBrowser } from \"@iobroker/adapter-react-v5\";\nimport { VisRxWidget } from \"@iobroker/vis-2-widgets-react-dev\";\nimport Device from \"./components/Device\";\nimport getDeviceConfigByType from \"./components/DeviceConfig\";\n\nclass ShellyCustomDeviceList extends (window.visRxWidget || VisRxWidget) {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\t// props.myContainer = useRef(null);\n\t\tthis.state.allDevices = {};\n\t\tthis.state.deviceList = {};\n\t\tconsole.debug(\"THIS DEVICES\");\n\t\tconsole.debug(this);\n\t}\n\n\tstatic getWidgetInfo() {\n\t\treturn {\n\t\t\tid: \"tplCustomDeviceListWidget\",\n\t\t\tvisSet: \"vis-2-shelly\",\n\t\t\tvisSetLabel: \"vis_2_widgets_shelly\", // Widget set translated label (should be defined only in one widget of set)\n\t\t\tvisSetColor: \"#cf00ff\", // Color of widget set. it is enough to set color only in one widget of set\n\t\t\tvisName: \"CustomDeviceList\", // Name of widget\n\t\t\tvisAttrs: [\n\t\t\t\t{\n\t\t\t\t\tname: \"common\", // group name\n\t\t\t\t\tfields: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: \"display\", // name in data structure\n\t\t\t\t\t\t\tlabel: \"vis_2_widgets_shelly_display\", // translated field label\n\t\t\t\t\t\t\ttype: \"select\",\n\t\t\t\t\t\t\toptions: [\n\t\t\t\t\t\t\t\t{ value: \"block\", label: \"block\" },\n\t\t\t\t\t\t\t\t{ value: \"flex\", label: \"flex\" },\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\tnoTranslation: true,\n\t\t\t\t\t\t\tdefault: \"block\",\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: \"count\",\n\t\t\t\t\t\t\ttype: \"number\",\n\t\t\t\t\t\t\tdefault: 1,\n\t\t\t\t\t\t\tlabel: \"vis_2_widgets_shelly_device_count\",\n\t\t\t\t\t\t\tonChange: (field, data, changeData) => changeData(data),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"devices\", // name of custom group\n\t\t\t\t\tlabel: \"vis_2_widgets_shelly_group_devices\", // label of custom group\n\t\t\t\t\tindexFrom: 1, // optional start index of iterator\n\t\t\t\t\tindexTo: \"count\",\n\t\t\t\t\tfields: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: \"device\",\n\t\t\t\t\t\t\tlabel: \"vis_2_widgets_shelly_device\",\n\t\t\t\t\t\t\ttype: \"custom\",\n\t\t\t\t\t\t\tcomponent: (field, data, onDataChange, socket, widgetID, view, project) => {\n\t\t\t\t\t\t\t\tconst deviceList =\n\t\t\t\t\t\t\t\t\ttypeof socket.context.socket.states.deviceList !== \"undefined\"\n\t\t\t\t\t\t\t\t\t\t? socket.context.socket.states.deviceList\n\t\t\t\t\t\t\t\t\t\t: {};\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<select\n\t\t\t\t\t\t\t\t\t\tname=\"ShellyDeviceList_DeviceSelect\"\n\t\t\t\t\t\t\t\t\t\tstyle={{ width: \"100%\" }}\n\t\t\t\t\t\t\t\t\t\tvalue={data[field.name]}\n\t\t\t\t\t\t\t\t\t\tonChange={(e) => {\n\t\t\t\t\t\t\t\t\t\t\tonDataChange({ [field.name]: e.target.value });\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<option value=\"\">-- Select device --</option>\n\t\t\t\t\t\t\t\t\t\t{Object.entries(deviceList).map(([key, val]) => {\n\t\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t\t<option value={key}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t{val.name !== null && val.name.length > 0 ? val.name : val.id}\n\t\t\t\t\t\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t// check here all possible types https://github.com/ioBroker/ioBroker.vis/blob/react/src/src/Attributes/Widget/SCHEMA.md\n\t\t\t],\n\t\t\tvisPrev: \"widgets/vis-2-shelly/vis2/img/editor/allDevices.png\",\n\t\t};\n\t}\n\n\t// eslint-disable-next-line class-methods-use-this\n\tasync propertiesUpdate() {\n\t\t// Widget has 3 important states\n\t\t// 1. this.state.values - contains all state values, that are used in widget (automatically collected from widget info).\n\t\t//                        So you can use `this.state.values[this.state.rxData.oid + '.val']` to get value of state with id this.state.rxData.oid\n\t\t// 2. this.state.rxData - contains all widget data with replaced bindings. E.g. if this.state.data.type is `{system.adapter.admin.0.alive}`,\n\t\t//                        then this.state.rxData.type will have state value of `system.adapter.admin.0.alive`\n\t\t// 3. this.state.rxStyle - contains all widget styles with replaced bindings. E.g. if this.state.styles.width is `{javascript.0.width}px`,\n\t\t//                        then this.state.rxData.type will have state value of `javascript.0.width` + 'px\n\t\tthis.updateDeviceList();\n\t}\n\n\tasync updateDeviceList() {\n\t\tthis.state.deviceList = {};\n\t\tfor (let count = 1; count <= this.state.data.count; count++) {\n\t\t\tif (\n\t\t\t\ttypeof this.state.data[`device${count}`] !== \"undefined\" &&\n\t\t\t\ttypeof this.state.allDevices[this.state.data[`device${count}`]] !== \"undefined\"\n\t\t\t) {\n\t\t\t\tthis.state.deviceList[count] = this.state.allDevices[this.state.data[`device${count}`]];\n\t\t\t}\n\t\t}\n\t\t// this.updateTypeConfig(this.state.deviceList);\n\t\t// this.forceUpdate();\n\t}\n\n\tasync updateTypeConfig(devices) {\n\t\tthis.state.typeConfig = {};\n\t\tfor (const key in devices) {\n\t\t\tconst device = devices[key];\n\t\t\tthis.vsID = `vis-2-shelly.${device.instance}.devices.${device.id}`;\n\t\t\tthis.domID = device.id.replaceAll(\"#\", \"\");\n\n\t\t\tconsole.log(key);\n\t\t\tdevice.typeConfig = await getDeviceConfigByType(\n\t\t\t\tdevice.type,\n\t\t\t\tthis.domID,\n\t\t\t\t{\n\t\t\t\t\tstateID: device.stateId,\n\t\t\t\t\ttype: device.type,\n\t\t\t\t\tid: device.id,\n\t\t\t\t\tsocket: this.props.context.socket,\n\t\t\t\t},\n\t\t\t\tthis.vsID,\n\t\t\t);\n\t\t}\n\t\tthis.setState({ deviceList: devices });\n\t\t// this.forceUpdate();\n\t}\n\n\tasync componentDidMount() {\n\t\tsuper.componentDidMount();\n\t\tthis.props.context.socket.subscribeState([\"vis-2-shelly.0.devices.ids\"], (id, state) => {\n\t\t\tthis.state.allDevices = JSON.parse(state.val);\n\t\t\tthis.props.context.socket.states.deviceList = this.state.allDevices;\n\t\t\tthis.updateDeviceList();\n\t\t\tthis.forceUpdate();\n\t\t});\n\n\t\t// Update data\n\t\tawait this.propertiesUpdate();\n\t}\n\n\t// Do not delete this method. It is used by vis to read the widget configuration.\n\t// eslint-disable-next-line class-methods-use-this\n\tgetWidgetInfo() {\n\t\treturn ShellyCustomDeviceList.getWidgetInfo();\n\t}\n\n\t// This function is called every time when rxData is changed\n\tasync onRxDataChanged() {\n\t\tconsole.debug(\"onRxDataChanged\");\n\t\tawait this.propertiesUpdate();\n\t}\n\n\t// This function is called every time when rxStyle is changed\n\t// eslint-disable-next-line class-methods-use-this\n\tasync onRxStyleChanged() {}\n\n\t// This function is called every time when some Object State updated, but all changes lands into this.state.values too\n\t// eslint-disable-next-line class-methods-use-this, no-unused-vars\n\tasync onStateUpdated(id, state) {}\n\n\trenderWidgetBody(props) {\n\t\tsuper.renderWidgetBody(props);\n\t\treturn (\n\t\t\t<Card style={{ width: \"100%\", height: \"100%\" }}>\n\t\t\t\t<CardContent>\n\t\t\t\t\t{Object.values(this.state.deviceList).map((device) => {\n\t\t\t\t\t\tthis.vsID = `vis-2-shelly.${device.instance}.devices.${device.id}`;\n\t\t\t\t\t\tthis.domID = device.id.replaceAll(\"#\", \"\");\n\t\t\t\t\t\t// const typeConfig = device.typeConfig;\n\t\t\t\t\t\tconst typeConfig = getDeviceConfigByType(\n\t\t\t\t\t\t\tdevice.type,\n\t\t\t\t\t\t\tthis.domID,\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstateID: device.stateId,\n\t\t\t\t\t\t\t\ttype: device.type,\n\t\t\t\t\t\t\t\tid: device.id,\n\t\t\t\t\t\t\t\tsocket: this.props.context.socket,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tthis.vsID,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\ttypeof typeConfig !== \"undefined\" &&\n\t\t\t\t\t\t\ttypeof typeConfig.dataPoint !== \"undefined\" &&\n\t\t\t\t\t\t\ttypeof typeConfig.dataPoint[device.relay] !== \"undefined\"\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tconst deviceDomID = typeConfig.domID + device.relay;\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<Device\n\t\t\t\t\t\t\t\t\tstateID={device.stateId}\n\t\t\t\t\t\t\t\t\ttype={device.type}\n\t\t\t\t\t\t\t\t\tid={device.id}\n\t\t\t\t\t\t\t\t\ttypeConfig={typeConfig}\n\t\t\t\t\t\t\t\t\tdeviceDomID={deviceDomID}\n\t\t\t\t\t\t\t\t\trelay={device.relay}\n\t\t\t\t\t\t\t\t\tstate={this.state}\n\t\t\t\t\t\t\t\t\tdataPoint={typeConfig.dataPoint[device.relay]}\n\t\t\t\t\t\t\t\t\tsocket={this.props.context.socket}\n\t\t\t\t\t\t\t\t\twidID={this.props.id}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t})}\n\t\t\t\t</CardContent>\n\t\t\t</Card>\n\t\t);\n\t}\n}\n\nexport default ShellyCustomDeviceList;\n","/**\n * @license React\n * react-jsx-runtime.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var f=require(\"react\"),k=Symbol.for(\"react.element\"),l=Symbol.for(\"react.fragment\"),m=Object.prototype.hasOwnProperty,n=f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,p={key:!0,ref:!0,__self:!0,__source:!0};\nfunction q(c,a,g){var b,d={},e=null,h=null;void 0!==g&&(e=\"\"+g);void 0!==a.key&&(e=\"\"+a.key);void 0!==a.ref&&(h=a.ref);for(b in a)m.call(a,b)&&!p.hasOwnProperty(b)&&(d[b]=a[b]);if(c&&c.defaultProps)for(b in a=c.defaultProps,a)void 0===d[b]&&(d[b]=a[b]);return{$$typeof:k,type:c,key:e,ref:h,props:d,_owner:n.current}}exports.Fragment=l;exports.jsx=q;exports.jsxs=q;\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-jsx-runtime.production.min.js');\n} else {\n  module.exports = require('./cjs/react-jsx-runtime.development.js');\n}\n"],"names":["ShellyCustomDeviceList","window","visRxWidget","VisRxWidget","constructor","props","super","this","state","allDevices","deviceList","console","debug","getWidgetInfo","id","visSet","visSetLabel","visSetColor","visName","visAttrs","name","fields","label","type","options","value","noTranslation","default","onChange","field","data","changeData","indexFrom","indexTo","component","onDataChange","socket","widgetID","view","project","context","states","_jsxs","style","width","e","target","children","_jsx","Object","entries","map","_ref","key","val","length","visPrev","propertiesUpdate","updateDeviceList","count","concat","updateTypeConfig","devices","typeConfig","device","vsID","instance","domID","replaceAll","log","getDeviceConfigByType","stateID","stateId","setState","componentDidMount","subscribeState","JSON","parse","forceUpdate","onRxDataChanged","onRxStyleChanged","onStateUpdated","renderWidgetBody","Card","height","CardContent","values","dataPoint","relay","deviceDomID","Device","widID","f","require","k","Symbol","for","l","m","prototype","hasOwnProperty","n","__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED","ReactCurrentOwner","p","ref","__self","__source","q","c","a","g","b","d","h","call","defaultProps","$$typeof","_owner","current","exports","Fragment","jsx","jsxs","module"],"sourceRoot":""}