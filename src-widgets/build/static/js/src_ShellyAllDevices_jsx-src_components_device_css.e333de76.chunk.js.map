{"version":3,"file":"static/js/src_ShellyAllDevices_jsx-src_components_device_css.e333de76.chunk.js","mappings":"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","sources":["ShellyAllDevices.jsx","../node_modules/react/cjs/react-jsx-runtime.production.min.js","../node_modules/react/jsx-runtime.js"],"sourcesContent":["import React from \"react\";\nimport { Card, CardContent } from \"@mui/material\";\n\nimport { I18n } from \"@iobroker/adapter-react-v5\";\nimport { VisRxWidget } from \"@iobroker/vis-2-widgets-react-dev\";\nimport Device from \"./components/Device\";\nimport getDeviceConfigByType from \"./components/DeviceConfig\";\n\nclass ShellyAllDevices extends (window.visRxWidget || VisRxWidget) {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\t// props.myContainer = useRef(null);\n\t\tthis.state.allDevices = {};\n\t\tthis.state.showDeviceDialog = false;\n\t\tconsole.debug(\"THIS\");\n\t\tconsole.debug(this);\n\t}\n\n\tstatic getWidgetInfo() {\n\t\treturn {\n\t\t\tid: \"tplAllDevicesWidget\",\n\t\t\tvisSet: \"vis-2-shelly\",\n\t\t\tvisSetLabel: \"vis_2_widgets_shelly\",\n\t\t\tvisSetColor: \"#cf00ff\",\n\t\t\tvisName: \"AllDevices\",\n\t\t\tvisAttrs: [\n\t\t\t\t{\n\t\t\t\t\tname: \"common\", // group name\n\t\t\t\t\tfields: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: \"display\", // name in data structure\n\t\t\t\t\t\t\tlabel: \"vis_2_widgets_shelly_display\", // translated field label\n\t\t\t\t\t\t\ttype: \"select\",\n\t\t\t\t\t\t\toptions: [\n\t\t\t\t\t\t\t\t{ value: \"block\", label: \"block\" },\n\t\t\t\t\t\t\t\t{ value: \"flex\", label: \"flex\" },\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\tnoTranslation: true,\n\t\t\t\t\t\t\tdefault: \"block\",\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t// check here all possible types https://github.com/ioBroker/ioBroker.vis/blob/react/src/src/Attributes/Widget/SCHEMA.md\n\t\t\t],\n\t\t\tvisPrev: \"widgets/vis-2-shelly/vis2/img/editor/allDevices.png\",\n\t\t};\n\t}\n\n\t// eslint-disable-next-line class-methods-use-this\n\tasync propertiesUpdate() {\n\t\t// Widget has 3 important states\n\t\t// 1. this.state.values - contains all state values, that are used in widget (automatically collected from widget info).\n\t\t//                        So you can use `this.state.values[this.state.rxData.oid + '.val']` to get value of state with id this.state.rxData.oid\n\t\t// 2. this.state.rxData - contains all widget data with replaced bindings. E.g. if this.state.data.type is `{system.adapter.admin.0.alive}`,\n\t\t//                        then this.state.rxData.type will have state value of `system.adapter.admin.0.alive`\n\t\t// 3. this.state.rxStyle - contains all widget styles with replaced bindings. E.g. if this.state.styles.width is `{javascript.0.width}px`,\n\t\t//                        then this.state.rxData.type will have state value of `javascript.0.width` + 'px\n\t}\n\n\tasync updateTypeConfig(devices) {\n\t\tthis.state.typeConfig = {};\n\t\tfor (const key in devices) {\n\t\t\tconst device = devices[key];\n\t\t\tthis.vsID = `vis-2-shelly.${device.instance}.devices.${device.id}`;\n\t\t\tthis.domID = device.id.replaceAll(\"#\", \"\");\n\n\t\t\t// console.log(key);\n\t\t\tdevices[key].typeConfig = await getDeviceConfigByType(\n\t\t\t\tdevice.type,\n\t\t\t\tthis.domID,\n\t\t\t\t{\n\t\t\t\t\tstateID: device.stateId,\n\t\t\t\t\ttype: device.type,\n\t\t\t\t\tid: device.id,\n\t\t\t\t\tsocket: this.props.context.socket,\n\t\t\t\t},\n\t\t\t\tthis.vsID,\n\t\t\t);\n\t\t}\n\t\tthis.state.allDevices = devices;\n\t\tthis.setState({ allDevices: devices });\n\t}\n\n\tasync componentDidMount() {\n\t\tsuper.componentDidMount();\n\t\tthis.props.context.socket.subscribeState([\"vis-2-shelly.0.devices.ids\"], (id, state) => {\n\t\t\t// this.state.allDevices = JSON.parse(state.val);\n\t\t\t// this.setState({ allDevices: JSON.parse(state.val) });\n\t\t\tthis.updateTypeConfig(JSON.parse(state.val));\n\t\t});\n\n\t\t// Update data\n\t\tawait this.propertiesUpdate();\n\t}\n\n\t// Do not delete this method. It is used by vis to read the widget configuration.\n\t// eslint-disable-next-line class-methods-use-this\n\tgetWidgetInfo() {\n\t\treturn ShellyAllDevices.getWidgetInfo();\n\t}\n\n\t// This function is called every time when rxData is changed\n\tasync onRxDataChanged() {\n\t\tconsole.debug(\"onRxDataChanged\");\n\t\tawait this.propertiesUpdate();\n\t}\n\n\t// This function is called every time when rxStyle is changed\n\t// eslint-disable-next-line class-methods-use-this\n\tasync onRxStyleChanged() {}\n\n\t// This function is called every time when some Object State updated, but all changes lands into this.state.values too\n\t// eslint-disable-next-line class-methods-use-this, no-unused-vars\n\tasync onStateUpdated(id, state) {}\n\n\tshowDeviceOptions() {\n\t\tthis.setState({ showDeviceDialog: true }, () => {\n\t\t\t// this.forceUpdate();\n\t\t});\n\t}\n\n\thideDeviceOptions() {\n\t\tthis.setState({ showDeviceDialog: false }, () => {\n\t\t\t// this.forceUpdate();\n\t\t});\n\t}\n\n\trenderWidgetBody(props) {\n\t\tsuper.renderWidgetBody(props);\n\t\t// console.debug(this.props.context.socket);\n\t\t// // Object.values(this.state.allDevices).map((device) => console.log(device));\n\t\t// console.debug(\"ALL DEVICES\");\n\t\t// console.debug(this.state.allDevices);\n\t\treturn (\n\t\t\t<Card style={{ width: \"100%\", height: \"100%\" }}>\n\t\t\t\t<CardContent>\n\t\t\t\t\t{Object.values(this.state.allDevices).map((device) => {\n\t\t\t\t\t\tthis.vsID = `vis-2-shelly.${device.instance}.devices.${device.id}`;\n\t\t\t\t\t\tconsole.debug(this.vsID);\n\t\t\t\t\t\tthis.domID = device.id.replaceAll(\"#\", \"\");\n\t\t\t\t\t\tconst typeConfig = device.typeConfig;\n\t\t\t\t\t\t// const typeConfig = getDeviceConfigByType(\n\t\t\t\t\t\t// \tdevice.type,\n\t\t\t\t\t\t// \tthis.domID,\n\t\t\t\t\t\t// \t{\n\t\t\t\t\t\t// \t\tstateID: device.stateId,\n\t\t\t\t\t\t// \t\ttype: device.type,\n\t\t\t\t\t\t// \t\tid: device.id,\n\t\t\t\t\t\t// \t\tsocket: this.props.context.socket,\n\t\t\t\t\t\t// \t},\n\t\t\t\t\t\t// \tthis.vsID,\n\t\t\t\t\t\t// );\n\t\t\t\t\t\tconsole.debug(typeConfig);\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\ttypeof typeConfig !== \"undefined\" &&\n\t\t\t\t\t\t\ttypeof typeConfig.dataPoint !== \"undefined\" &&\n\t\t\t\t\t\t\ttypeof typeConfig.dataPoint[device.relay] !== \"undefined\"\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tconst deviceDomID = typeConfig.domID + device.relay;\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<Device\n\t\t\t\t\t\t\t\t\tstateID={device.stateId}\n\t\t\t\t\t\t\t\t\ttype={device.type}\n\t\t\t\t\t\t\t\t\tid={device.id}\n\t\t\t\t\t\t\t\t\ttypeConfig={typeConfig}\n\t\t\t\t\t\t\t\t\tdeviceDomID={deviceDomID}\n\t\t\t\t\t\t\t\t\trelay={device.relay}\n\t\t\t\t\t\t\t\t\tstate={this.state}\n\t\t\t\t\t\t\t\t\tdataPoint={typeConfig.dataPoint[device.relay]}\n\t\t\t\t\t\t\t\t\tsocket={this.props.context.socket}\n\t\t\t\t\t\t\t\t\twidID={this.props.id}\n\t\t\t\t\t\t\t\t\tparentThis={this}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t})}\n\t\t\t\t\t{/* {I18n.t(\"My Demo Shelly2: \")} */}\n\t\t\t\t\t{/* {this.state.values[`${this.state.rxData.oid}.val`]} */}\n\t\t\t\t</CardContent>\n\t\t\t\t{/* <DeviceDialog\n\t\t\t\t\tshowDeviceDialog={this.state.showDeviceDialog}\n\t\t\t\t\thideDialog={this.hideDeviceOptions}\n\t\t\t\t\tparentThis={this}\n\t\t\t\t/> */}\n\t\t\t\t{this.state.showDeviceDialog && <div>test</div>}\n\t\t\t</Card>\n\t\t);\n\t}\n}\n\nexport default ShellyAllDevices;\n","/**\n * @license React\n * react-jsx-runtime.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var f=require(\"react\"),k=Symbol.for(\"react.element\"),l=Symbol.for(\"react.fragment\"),m=Object.prototype.hasOwnProperty,n=f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,p={key:!0,ref:!0,__self:!0,__source:!0};\nfunction q(c,a,g){var b,d={},e=null,h=null;void 0!==g&&(e=\"\"+g);void 0!==a.key&&(e=\"\"+a.key);void 0!==a.ref&&(h=a.ref);for(b in a)m.call(a,b)&&!p.hasOwnProperty(b)&&(d[b]=a[b]);if(c&&c.defaultProps)for(b in a=c.defaultProps,a)void 0===d[b]&&(d[b]=a[b]);return{$$typeof:k,type:c,key:e,ref:h,props:d,_owner:n.current}}exports.Fragment=l;exports.jsx=q;exports.jsxs=q;\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-jsx-runtime.production.min.js');\n} else {\n  module.exports = require('./cjs/react-jsx-runtime.development.js');\n}\n"],"names":["ShellyAllDevices","window","visRxWidget","VisRxWidget","constructor","props","super","this","state","allDevices","showDeviceDialog","console","debug","getWidgetInfo","id","visSet","visSetLabel","visSetColor","visName","visAttrs","name","fields","label","type","options","value","noTranslation","default","visPrev","propertiesUpdate","updateTypeConfig","devices","typeConfig","key","device","vsID","concat","instance","domID","replaceAll","getDeviceConfigByType","stateID","stateId","socket","context","setState","componentDidMount","subscribeState","JSON","parse","val","onRxDataChanged","onRxStyleChanged","onStateUpdated","showDeviceOptions","hideDeviceOptions","renderWidgetBody","_jsxs","Card","style","width","height","children","_jsx","CardContent","Object","values","map","dataPoint","relay","deviceDomID","Device","widID","parentThis","f","require","k","Symbol","for","l","m","prototype","hasOwnProperty","n","__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED","ReactCurrentOwner","p","ref","__self","__source","q","c","a","g","b","d","e","h","call","defaultProps","$$typeof","_owner","current","exports","Fragment","jsx","jsxs","module"],"sourceRoot":""}