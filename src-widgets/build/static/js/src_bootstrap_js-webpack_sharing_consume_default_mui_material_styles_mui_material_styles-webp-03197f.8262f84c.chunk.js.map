{"version":3,"file":"static/js/src_bootstrap_js-webpack_sharing_consume_default_mui_material_styles_mui_material_styles-webp-03197f.8262f84c.chunk.js","mappings":"uaASA,MAAMA,UAA0BC,OAAOC,aAAeC,EAAAA,aACrDC,WAAAA,CAAYC,GACXC,MAAMD,GAENE,KAAKC,MAAMC,WAAa,CAAC,EACzBF,KAAKC,MAAME,kBAAmB,EAC9BC,QAAQC,MAAM,QACdD,QAAQC,MAAML,KACf,CAEA,oBAAOM,GACN,MAAO,CACNC,GAAI,sBACJC,OAAQ,eACRC,YAAa,uBACbC,YAAa,UACbC,QAAS,aACTC,SAAU,CACT,CACCC,KAAM,SACNC,OAAQ,CACP,CACCD,KAAM,UACNE,MAAO,+BACPC,KAAM,SACNC,QAAS,CACR,CAAEC,MAAO,QAASH,MAAO,SACzB,CAAEG,MAAO,OAAQH,MAAO,SAEzBI,eAAe,EACfC,QAAS,YAMbC,QAAS,sDAEX,CAGA,sBAAMC,GAOL,CAGD,uBAAMC,GACLxB,MAAMwB,oBACNvB,KAAKF,MAAM0B,QAAQC,OAAOC,eAAe,CAAC,+BAA+B,CAACnB,EAAIN,KAC7ED,KAAKC,MAAMC,WAAayB,KAAKC,MAAM3B,EAAM4B,KACzC7B,KAAK8B,aAAa,UAIb9B,KAAKsB,kBACZ,CAIAhB,aAAAA,GACC,OAAOb,EAAiBa,eACzB,CAGA,qBAAMyB,GACL3B,QAAQC,MAAM,yBACRL,KAAKsB,kBACZ,CAIA,sBAAMU,GAAoB,CAI1B,oBAAMC,CAAe1B,EAAIN,GAAQ,CAEjCiC,iBAAAA,GACClC,KAAKmC,SAAS,CAAEhC,kBAAkB,IAAQ,QAG3C,CAEAiC,iBAAAA,GACCpC,KAAKmC,SAAS,CAAEhC,kBAAkB,IAAS,QAG5C,CAEAkC,gBAAAA,CAAiBvC,GAIhB,OAHAC,MAAMsC,iBAAiBvC,GACvBM,QAAQC,MAAML,KAAKF,MAAM0B,QAAQC,SAGhCa,EAAAA,EAAAA,MAACC,EAAAA,KAAI,CAACC,MAAO,CAAEC,MAAO,OAAQC,OAAQ,QAASC,SAAA,EAC9CC,EAAAA,EAAAA,KAACC,EAAAA,YAAW,CAAAF,SACVG,OAAOC,OAAO/C,KAAKC,MAAMC,YAAY8C,KAAKC,IAC1CjD,KAAKkD,KAAI,gBAAAC,OAAmBF,EAAOG,SAAQ,aAAAD,OAAYF,EAAO1C,IAC9DP,KAAKqD,MAAQJ,EAAO1C,GAAG+C,WAAW,IAAK,IACvC,MAAMC,GAAaC,EAAAA,EAAAA,GAClBP,EAAOjC,KACPhB,KAAKqD,MACL,CAAEI,QAASR,EAAOS,QAAS1C,KAAMiC,EAAOjC,KAAMT,GAAI0C,EAAO1C,IACzDP,KAAKkD,MAEN,GACiC,qBAAzBK,EAAWI,WAC4B,qBAAvCJ,EAAWI,UAAUV,EAAOW,OAClC,CACD,MAAMC,EAAcN,EAAWF,MAAQJ,EAAOW,MAC9C,OACChB,EAAAA,EAAAA,KAACkB,EAAAA,EAAM,CACNL,QAASR,EAAOS,QAChB1C,KAAMiC,EAAOjC,KACbT,GAAI0C,EAAO1C,GACXgD,WAAYA,EACZM,YAAaA,EACbD,MAAOX,EAAOW,MACd3D,MAAOD,KAAKC,MACZ0D,UAAWJ,EAAWI,UAAUV,EAAOW,OACvCnC,OAAQzB,KAAKF,MAAM0B,QAAQC,OAC3BsC,MAAO/D,KAAKF,MAAMS,GAClByD,WAAYhE,MAGf,OAUDA,KAAKC,MAAME,mBAAoByC,EAAAA,EAAAA,KAAA,OAAAD,SAAK,WAGxC,EAGD,UCnJA,MAAMsB,UAA6BvE,OAAOC,aAAeC,EAAAA,aACxDC,WAAAA,CAAYC,GACXC,MAAMD,GAENE,KAAKC,MAAMC,WAAa,CAAC,EACzBF,KAAKC,MAAMiE,YAAc,CAAC,EAC1B9D,QAAQC,MAAM,aACdD,QAAQC,MAAML,KACf,CAEA,oBAAOM,GACN,MAAO,CACNC,GAAI,yBACJC,OAAQ,eACRC,YAAa,uBACbC,YAAa,UACbC,QAAS,gBACTC,SAAU,CACT,CACCC,KAAM,SACNC,OAAQ,CACP,CACCD,KAAM,UACNE,MAAO,+BACPC,KAAM,SACNC,QAAS,CACR,CAAEC,MAAO,QAASH,MAAO,SACzB,CAAEG,MAAO,OAAQH,MAAO,SAEzBI,eAAe,EACfC,QAAS,SAEV,CACCP,KAAM,QACNE,MAAO,6BACPC,KAAM,SACNmD,UAAWA,CAACC,EAAOC,EAAMC,EAAc7C,EAAQ8C,EAAUC,EAAMC,KAO9D,MAAMC,EAC4C,qBAA1CjD,EAAOD,QAAQC,OAAOkD,OAAOD,SACjCjD,EAAOD,QAAQC,OAAOkD,OAAOD,SAC7B,CAAC,EACL,OACCpC,EAAAA,EAAAA,MAAA,UAECzB,KAAK,0BACL2B,MAAO,CAAEC,MAAO,QAChBvB,MAAOmD,EAAKD,EAAMvD,MAClB+D,SAAWC,IACVP,EAAa,CAAE,CAACF,EAAMvD,MAAOgE,EAAEC,OAAO5D,QAGtCd,QAAQC,MAAM+D,GACdhE,QAAQC,MAAMgE,GACdjE,QAAQC,MAAMiE,GACdlE,QAAQC,MAAMoB,EAAO,EAIpBkB,SAAA,EAEFC,EAAAA,EAAAA,KAAA,UAAQ1B,MAAM,GAAEyB,SAAC,sBAChBG,OAAOiC,QAAQL,GAAU1B,KAAIgC,IAAiB,IAAfC,EAAKpD,GAAImD,EACxC,OAAOpC,EAAAA,EAAAA,KAAA,UAAQ1B,MAAO+D,EAAItC,SAAEd,GAAa,MAElC,MAQfR,QAAS,sDAEX,CAGA,sBAAMC,GAQLtB,KAAKkF,mBACN,CAEA,uBAAMA,GACLlF,KAAKC,MAAMiE,YAAc,CAAC,EACW,qBAA1BlE,KAAKC,MAAMoE,KAAKc,QAC1BrC,OAAOiC,QAAQ/E,KAAKC,MAAMC,YAAYkF,SAAQC,IAAoB,IAAlBJ,EAAKhC,GAAOoC,EACvDpC,EAAOqC,OAAStF,KAAKC,MAAMoE,KAAKc,QACnCnF,KAAKC,MAAMiE,YAAYe,GAAOhC,EAC/B,IAEDjD,KAAK8B,cAEP,CAEA,uBAAMP,GACLxB,MAAMwB,oBACmD,qBAA9CvB,KAAKF,MAAM0B,QAAQC,OAAOkD,OAAOD,UAC3C1E,KAAKF,MAAM0B,QAAQC,OAAOC,eAAe,CAAC,mCAAmC,CAACnB,EAAIN,KACjFD,KAAKC,MAAMkF,MAAQxD,KAAKC,MAAM3B,EAAM4B,KACpC7B,KAAKF,MAAM0B,QAAQC,OAAOkD,OAAOD,SAAW1E,KAAKC,MAAMkF,KAAK,IAG9DnF,KAAKF,MAAM0B,QAAQC,OAAOC,eAAe,CAAC,+BAA+B,CAACnB,EAAIN,KAC7ED,KAAKC,MAAMC,WAAayB,KAAKC,MAAM3B,EAAM4B,KACzC7B,KAAKkF,oBACLlF,KAAK8B,aAAa,UAIb9B,KAAKsB,kBACZ,CAIAhB,aAAAA,GACC,OAAO2D,EAAoB3D,eAC5B,CAGA,qBAAMyB,GACL3B,QAAQC,MAAM,yBACRL,KAAKsB,kBACZ,CAIA,sBAAMU,GAAoB,CAI1B,oBAAMC,CAAe1B,EAAIN,GAAQ,CAEjCoC,gBAAAA,CAAiBvC,GAIhB,OAHAC,MAAMsC,iBAAiBvC,GACvBM,QAAQC,MAAM,gBACdD,QAAQC,MAAML,KAAKC,MAAMiE,cAExBtB,EAAAA,EAAAA,KAACL,EAAAA,KAAI,CAACC,MAAO,CAAEC,MAAO,OAAQC,OAAQ,QAASC,UAC9CC,EAAAA,EAAAA,KAACC,EAAAA,YAAW,CAAAF,SACVG,OAAOC,OAAO/C,KAAKC,MAAMiE,aAAalB,KAAKC,IAC3CjD,KAAKkD,KAAI,gBAAAC,OAAmBF,EAAOG,SAAQ,aAAAD,OAAYF,EAAO1C,IAC9DP,KAAKqD,MAAQJ,EAAO1C,GAAG+C,WAAW,IAAK,IACvC,MAAMC,GAAaC,EAAAA,EAAAA,GAClBP,EAAOjC,KACPhB,KAAKqD,MACL,CAAEI,QAASR,EAAOS,QAAS1C,KAAMiC,EAAOjC,KAAMT,GAAI0C,EAAO1C,IACzDP,KAAKkD,MAEN,GACiC,qBAAzBK,EAAWI,WAC4B,qBAAvCJ,EAAWI,UAAUV,EAAOW,OAClC,CACD,MAAMC,EAAcN,EAAWF,MAAQJ,EAAOW,MAC9C,OACChB,EAAAA,EAAAA,KAACkB,EAAAA,EAAM,CACNL,QAASR,EAAOS,QAChB1C,KAAMiC,EAAOjC,KACbT,GAAI0C,EAAO1C,GACXgD,WAAYA,EACZM,YAAaA,EACbD,MAAOX,EAAOW,MACd3D,MAAOD,KAAKC,MACZ0D,UAAWJ,EAAWI,UAAUV,EAAOW,OACvCnC,OAAQzB,KAAKF,MAAM0B,QAAQC,OAC3BsC,MAAO/D,KAAKF,MAAMS,IAGrB,QAKL,EAGD,UC3LA,MAAMgF,UAAgC7F,OAAOC,aAAeC,EAAAA,aAC3DC,WAAAA,CAAYC,GACXC,MAAMD,GAENE,KAAKC,MAAMC,WAAa,CAAC,EACzBF,KAAKC,MAAMuF,WAAa,CAAC,EACzBpF,QAAQC,MAAM,gBACdD,QAAQC,MAAML,KACf,CAEA,oBAAOM,GACN,MAAO,CACNC,GAAI,4BACJC,OAAQ,eACRC,YAAa,uBACbC,YAAa,UACbC,QAAS,mBACTC,SAAU,CACT,CACCC,KAAM,SACNC,OAAQ,CACP,CACCD,KAAM,UACNE,MAAO,+BACPC,KAAM,SACNC,QAAS,CACR,CAAEC,MAAO,QAASH,MAAO,SACzB,CAAEG,MAAO,OAAQH,MAAO,SAEzBI,eAAe,EACfC,QAAS,SAEV,CACCP,KAAM,QACNG,KAAM,SACNI,QAAS,EACTL,MAAO,oCACP6D,SAAUA,CAACR,EAAOC,EAAMoB,IAAeA,EAAWpB,MAIrD,CACCxD,KAAM,UACNE,MAAO,qCACP2E,UAAW,EACXC,QAAS,QACT7E,OAAQ,CACP,CACCD,KAAM,SACNE,MAAO,8BACPC,KAAM,SACNmD,UAAWA,CAACC,EAAOC,EAAMC,EAAc7C,EAAQ8C,EAAUC,EAAMC,KAC9D,MAAMe,EAC8C,qBAA5C/D,EAAOD,QAAQC,OAAOkD,OAAOa,WACjC/D,EAAOD,QAAQC,OAAOkD,OAAOa,WAC7B,CAAC,EACL,OACClD,EAAAA,EAAAA,MAAA,UACCzB,KAAK,gCACL2B,MAAO,CAAEC,MAAO,QAChBvB,MAAOmD,EAAKD,EAAMvD,MAClB+D,SAAWC,IACVP,EAAa,CAAE,CAACF,EAAMvD,MAAOgE,EAAEC,OAAO5D,OAAQ,EAC7CyB,SAAA,EAEFC,EAAAA,EAAAA,KAAA,UAAQ1B,MAAM,GAAEyB,SAAC,wBAChBG,OAAOiC,QAAQS,GAAYxC,KAAIgC,IAAiB,IAAfC,EAAKpD,GAAImD,EAC1C,OACCpC,EAAAA,EAAAA,KAAA,UAAQ1B,MAAO+D,EAAItC,SACJ,OAAbd,EAAIhB,MAAiBgB,EAAIhB,KAAK+E,OAAS,EAAI/D,EAAIhB,KAAOgB,EAAItB,IACnD,MAGH,MAQfc,QAAS,sDAEX,CAGA,sBAAMC,GAQLtB,KAAK6F,kBACN,CAEA,sBAAMA,GACL7F,KAAKC,MAAMuF,WAAa,CAAC,EACzB,IAAK,IAAIM,EAAQ,EAAGA,GAAS9F,KAAKC,MAAMoE,KAAKyB,MAAOA,IAEL,qBAAtC9F,KAAKC,MAAMoE,KAAK,SAADlB,OAAU2C,KACoC,qBAA7D9F,KAAKC,MAAMC,WAAWF,KAAKC,MAAMoE,KAAK,SAADlB,OAAU2C,OAEtD9F,KAAKC,MAAMuF,WAAWM,GAAS9F,KAAKC,MAAMC,WAAWF,KAAKC,MAAMoE,KAAK,SAADlB,OAAU2C,MAGhF9F,KAAK8B,aACN,CAEA,uBAAMP,GACLxB,MAAMwB,oBACNvB,KAAKF,MAAM0B,QAAQC,OAAOC,eAAe,CAAC,+BAA+B,CAACnB,EAAIN,KAC7ED,KAAKC,MAAMC,WAAayB,KAAKC,MAAM3B,EAAM4B,KACzC7B,KAAKF,MAAM0B,QAAQC,OAAOkD,OAAOa,WAAaxF,KAAKC,MAAMC,WACzDF,KAAK6F,mBACL7F,KAAK8B,aAAa,UAIb9B,KAAKsB,kBACZ,CAIAhB,aAAAA,GACC,OAAOiF,EAAuBjF,eAC/B,CAGA,qBAAMyB,GACL3B,QAAQC,MAAM,yBACRL,KAAKsB,kBACZ,CAIA,sBAAMU,GAAoB,CAI1B,oBAAMC,CAAe1B,EAAIN,GAAQ,CAEjCoC,gBAAAA,CAAiBvC,GAEhB,OADAC,MAAMsC,iBAAiBvC,IAEtB8C,EAAAA,EAAAA,KAACL,EAAAA,KAAI,CAACC,MAAO,CAAEC,MAAO,OAAQC,OAAQ,QAASC,UAC9CC,EAAAA,EAAAA,KAACC,EAAAA,YAAW,CAAAF,SACVG,OAAOC,OAAO/C,KAAKC,MAAMuF,YAAYxC,KAAKC,IAC1CjD,KAAKkD,KAAI,gBAAAC,OAAmBF,EAAOG,SAAQ,aAAAD,OAAYF,EAAO1C,IAC9DP,KAAKqD,MAAQJ,EAAO1C,GAAG+C,WAAW,IAAK,IACvC,MAAMC,GAAaC,EAAAA,EAAAA,GAClBP,EAAOjC,KACPhB,KAAKqD,MACL,CAAEI,QAASR,EAAOS,QAAS1C,KAAMiC,EAAOjC,KAAMT,GAAI0C,EAAO1C,IACzDP,KAAKkD,MAEN,GACiC,qBAAzBK,EAAWI,WAC4B,qBAAvCJ,EAAWI,UAAUV,EAAOW,OAClC,CACD,MAAMC,EAAcN,EAAWF,MAAQJ,EAAOW,MAC9C,OACChB,EAAAA,EAAAA,KAACkB,EAAAA,EAAM,CACNL,QAASR,EAAOS,QAChB1C,KAAMiC,EAAOjC,KACbT,GAAI0C,EAAO1C,GACXgD,WAAYA,EACZM,YAAaA,EACbD,MAAOX,EAAOW,MACd3D,MAAOD,KAAKC,MACZ0D,UAAWJ,EAAWI,UAAUV,EAAOW,OACvCnC,OAAQzB,KAAKF,MAAM0B,QAAQC,OAC3BsC,MAAO/D,KAAKF,MAAMS,IAGrB,QAKL,EAGD,UCnLA,EAbqB,CACjBwF,GAAIC,EAAQ,OACZC,GAAID,EAAQ,OACZE,GAAIF,EAAQ,OACZG,GAAIH,EAAQ,OACZI,GAAIJ,EAAQ,OACZK,GAAIL,EAAQ,OACZM,GAAIN,EAAQ,OACZO,GAAIP,EAAQ,OACZQ,GAAIR,EAAQ,OACZ,QAASA,EAAQ,QCMrB,MAAMS,UAAYC,EAAAA,EACjB7G,WAAAA,CAAYC,GACXC,MAAMD,GAGN,KAKD6G,oBAAuBC,IAClBA,GACH5G,KAAKyB,OAAOoF,kBAAkBC,MAAMC,GAAiB/G,KAAKmC,SAAS,CAAE4E,kBACtE,EAPAC,EAAAA,KAAKC,mBAAmBC,GACxBlH,KAAKyB,OAAO0F,0BAA0BnH,KAAK2G,oBAC5C,CAQAS,YAAAA,GACC,MAAMC,EAAU,CACfnH,WAAYoH,EAAiBhH,gBAC7B4D,YAAaqD,EAAoBjH,gBACjCkH,iBAAkBC,EAAuBnH,iBAG1C,OACCsC,EAAAA,EAAAA,KAAA,OAAK8E,UAAW1H,KAAKF,MAAM6H,QAAQC,IAAIjF,UACtCC,EAAAA,EAAAA,KAAA,OAAAD,SACEG,OAAO+E,KAAKR,GAASrE,KAAKiC,IAEzBrC,EAAAA,EAAAA,KAAA,OAAeJ,MAAO,CAAEsF,QAAS,OAAQC,WAAY,UAAWpF,SAU9DsC,GAVQA,QAkBhB,EAGD,SAAe+C,EAAAA,EAAAA,aApDCC,IAAK,CACpBL,IAAK,CAAC,KAmDP,CAAkCnB,IC9DlCyB,EAAAA,EAAAA,GAAUzB,E","sources":["ShellyAllDevices.jsx","ShellyByRoomDevices.jsx","ShellyCustomDeviceList.jsx","translations.js","App.jsx","bootstrap.js"],"sourcesContent":["import React from \"react\";\nimport { Card, CardContent } from \"@mui/material\";\n\nimport { I18n } from \"@iobroker/adapter-react-v5\";\nimport { VisRxWidget } from \"@iobroker/vis-2-widgets-react-dev\";\nimport Device from \"./components/Device\";\nimport getDeviceConfigByType from \"./components/DeviceConfig\";\nimport DeviceDialog from \"./components/DeviceDialog\";\n\nclass ShellyAllDevices extends (window.visRxWidget || VisRxWidget) {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\t// props.myContainer = useRef(null);\n\t\tthis.state.allDevices = {};\n\t\tthis.state.showDeviceDialog = false;\n\t\tconsole.debug(\"THIS\");\n\t\tconsole.debug(this);\n\t}\n\n\tstatic getWidgetInfo() {\n\t\treturn {\n\t\t\tid: \"tplAllDevicesWidget\",\n\t\t\tvisSet: \"vis-2-shelly\",\n\t\t\tvisSetLabel: \"vis_2_widgets_shelly\", // Widget set translated label (should be defined only in one widget of set)\n\t\t\tvisSetColor: \"#cf00ff\", // Color of widget set. it is enough to set color only in one widget of set\n\t\t\tvisName: \"AllDevices\", // Name of widget\n\t\t\tvisAttrs: [\n\t\t\t\t{\n\t\t\t\t\tname: \"common\", // group name\n\t\t\t\t\tfields: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: \"display\", // name in data structure\n\t\t\t\t\t\t\tlabel: \"vis_2_widgets_shelly_display\", // translated field label\n\t\t\t\t\t\t\ttype: \"select\",\n\t\t\t\t\t\t\toptions: [\n\t\t\t\t\t\t\t\t{ value: \"block\", label: \"block\" },\n\t\t\t\t\t\t\t\t{ value: \"flex\", label: \"flex\" },\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\tnoTranslation: true,\n\t\t\t\t\t\t\tdefault: \"block\",\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t// check here all possible types https://github.com/ioBroker/ioBroker.vis/blob/react/src/src/Attributes/Widget/SCHEMA.md\n\t\t\t],\n\t\t\tvisPrev: \"widgets/vis-2-shelly/vis2/img/editor/allDevices.png\",\n\t\t};\n\t}\n\n\t// eslint-disable-next-line class-methods-use-this\n\tasync propertiesUpdate() {\n\t\t// Widget has 3 important states\n\t\t// 1. this.state.values - contains all state values, that are used in widget (automatically collected from widget info).\n\t\t//                        So you can use `this.state.values[this.state.rxData.oid + '.val']` to get value of state with id this.state.rxData.oid\n\t\t// 2. this.state.rxData - contains all widget data with replaced bindings. E.g. if this.state.data.type is `{system.adapter.admin.0.alive}`,\n\t\t//                        then this.state.rxData.type will have state value of `system.adapter.admin.0.alive`\n\t\t// 3. this.state.rxStyle - contains all widget styles with replaced bindings. E.g. if this.state.styles.width is `{javascript.0.width}px`,\n\t\t//                        then this.state.rxData.type will have state value of `javascript.0.width` + 'px\n\t}\n\n\tasync componentDidMount() {\n\t\tsuper.componentDidMount();\n\t\tthis.props.context.socket.subscribeState([\"vis-2-shelly.0.devices.ids\"], (id, state) => {\n\t\t\tthis.state.allDevices = JSON.parse(state.val);\n\t\t\tthis.forceUpdate();\n\t\t});\n\n\t\t// Update data\n\t\tawait this.propertiesUpdate();\n\t}\n\n\t// Do not delete this method. It is used by vis to read the widget configuration.\n\t// eslint-disable-next-line class-methods-use-this\n\tgetWidgetInfo() {\n\t\treturn ShellyAllDevices.getWidgetInfo();\n\t}\n\n\t// This function is called every time when rxData is changed\n\tasync onRxDataChanged() {\n\t\tconsole.debug(\"onRxDataChanged\");\n\t\tawait this.propertiesUpdate();\n\t}\n\n\t// This function is called every time when rxStyle is changed\n\t// eslint-disable-next-line class-methods-use-this\n\tasync onRxStyleChanged() {}\n\n\t// This function is called every time when some Object State updated, but all changes lands into this.state.values too\n\t// eslint-disable-next-line class-methods-use-this, no-unused-vars\n\tasync onStateUpdated(id, state) {}\n\n\tshowDeviceOptions() {\n\t\tthis.setState({ showDeviceDialog: true }, () => {\n\t\t\t// this.forceUpdate();\n\t\t});\n\t}\n\n\thideDeviceOptions() {\n\t\tthis.setState({ showDeviceDialog: false }, () => {\n\t\t\t// this.forceUpdate();\n\t\t});\n\t}\n\n\trenderWidgetBody(props) {\n\t\tsuper.renderWidgetBody(props);\n\t\tconsole.debug(this.props.context.socket);\n\t\t// Object.values(this.state.allDevices).map((device) => console.log(device));\n\t\treturn (\n\t\t\t<Card style={{ width: \"100%\", height: \"100%\" }}>\n\t\t\t\t<CardContent>\n\t\t\t\t\t{Object.values(this.state.allDevices).map((device) => {\n\t\t\t\t\t\tthis.vsID = `vis-2-shelly.${device.instance}.devices.${device.id}`;\n\t\t\t\t\t\tthis.domID = device.id.replaceAll(\"#\", \"\");\n\t\t\t\t\t\tconst typeConfig = getDeviceConfigByType(\n\t\t\t\t\t\t\tdevice.type,\n\t\t\t\t\t\t\tthis.domID,\n\t\t\t\t\t\t\t{ stateID: device.stateId, type: device.type, id: device.id },\n\t\t\t\t\t\t\tthis.vsID,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\ttypeof typeConfig.dataPoint !== \"undefined\" &&\n\t\t\t\t\t\t\ttypeof typeConfig.dataPoint[device.relay] !== \"undefined\"\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tconst deviceDomID = typeConfig.domID + device.relay;\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<Device\n\t\t\t\t\t\t\t\t\tstateID={device.stateId}\n\t\t\t\t\t\t\t\t\ttype={device.type}\n\t\t\t\t\t\t\t\t\tid={device.id}\n\t\t\t\t\t\t\t\t\ttypeConfig={typeConfig}\n\t\t\t\t\t\t\t\t\tdeviceDomID={deviceDomID}\n\t\t\t\t\t\t\t\t\trelay={device.relay}\n\t\t\t\t\t\t\t\t\tstate={this.state}\n\t\t\t\t\t\t\t\t\tdataPoint={typeConfig.dataPoint[device.relay]}\n\t\t\t\t\t\t\t\t\tsocket={this.props.context.socket}\n\t\t\t\t\t\t\t\t\twidID={this.props.id}\n\t\t\t\t\t\t\t\t\tparentThis={this}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t})}\n\t\t\t\t\t{/* {I18n.t(\"My Demo Shelly2: \")} */}\n\t\t\t\t\t{/* {this.state.values[`${this.state.rxData.oid}.val`]} */}\n\t\t\t\t</CardContent>\n\t\t\t\t{/* <DeviceDialog\n\t\t\t\t\tshowDeviceDialog={this.state.showDeviceDialog}\n\t\t\t\t\thideDialog={this.hideDeviceOptions}\n\t\t\t\t\tparentThis={this}\n\t\t\t\t/> */}\n\t\t\t\t{this.state.showDeviceDialog && <div>test</div>}\n\t\t\t</Card>\n\t\t);\n\t}\n}\n\nexport default ShellyAllDevices;\n","import React from \"react\";\nimport { Card, CardContent, TextField, Select, Option } from \"@mui/material\";\n\nimport { I18n, ObjectBrowser } from \"@iobroker/adapter-react-v5\";\nimport { VisRxWidget } from \"@iobroker/vis-2-widgets-react-dev\";\nimport Device from \"./components/Device\";\nimport getDeviceConfigByType from \"./components/DeviceConfig\";\n\nclass ShellyByRoomDevices extends (window.visRxWidget || VisRxWidget) {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\t// props.myContainer = useRef(null);\n\t\tthis.state.allDevices = {};\n\t\tthis.state.roomDevices = {};\n\t\tconsole.debug(\"THIS ROOM\");\n\t\tconsole.debug(this);\n\t}\n\n\tstatic getWidgetInfo() {\n\t\treturn {\n\t\t\tid: \"tplByRoomDevicesWidget\",\n\t\t\tvisSet: \"vis-2-shelly\",\n\t\t\tvisSetLabel: \"vis_2_widgets_shelly\", // Widget set translated label (should be defined only in one widget of set)\n\t\t\tvisSetColor: \"#cf00ff\", // Color of widget set. it is enough to set color only in one widget of set\n\t\t\tvisName: \"ByRoomDevices\", // Name of widget\n\t\t\tvisAttrs: [\n\t\t\t\t{\n\t\t\t\t\tname: \"common\", // group name\n\t\t\t\t\tfields: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: \"display\", // name in data structure\n\t\t\t\t\t\t\tlabel: \"vis_2_widgets_shelly_display\", // translated field label\n\t\t\t\t\t\t\ttype: \"select\",\n\t\t\t\t\t\t\toptions: [\n\t\t\t\t\t\t\t\t{ value: \"block\", label: \"block\" },\n\t\t\t\t\t\t\t\t{ value: \"flex\", label: \"flex\" },\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\tnoTranslation: true,\n\t\t\t\t\t\t\tdefault: \"block\",\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: \"rooms\",\n\t\t\t\t\t\t\tlabel: \"vis_2_widgets_shelly_rooms\",\n\t\t\t\t\t\t\ttype: \"custom\",\n\t\t\t\t\t\t\tcomponent: (field, data, onDataChange, socket, widgetID, view, project) => {\n\t\t\t\t\t\t\t\t// console.debug(\"Component\");\n\t\t\t\t\t\t\t\t// console.debug(this);\n\t\t\t\t\t\t\t\t// console.debug(field);\n\t\t\t\t\t\t\t\t// console.debug(\"DATA\");\n\t\t\t\t\t\t\t\t// console.debug(data);\n\t\t\t\t\t\t\t\t// console.debug(socket);\n\t\t\t\t\t\t\t\tconst roomList =\n\t\t\t\t\t\t\t\t\ttypeof socket.context.socket.states.roomList !== \"undefined\"\n\t\t\t\t\t\t\t\t\t\t? socket.context.socket.states.roomList\n\t\t\t\t\t\t\t\t\t\t: {};\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<select\n\t\t\t\t\t\t\t\t\t\t// id={`${widgetID}_ShellyRoomSelect`}\n\t\t\t\t\t\t\t\t\t\tname=\"ShellyByRoom_RoomSelect\"\n\t\t\t\t\t\t\t\t\t\tstyle={{ width: \"100%\" }}\n\t\t\t\t\t\t\t\t\t\tvalue={data[field.name]}\n\t\t\t\t\t\t\t\t\t\tonChange={(e) => {\n\t\t\t\t\t\t\t\t\t\t\tonDataChange({ [field.name]: e.target.value }); // returns all changed field as object.\n\t\t\t\t\t\t\t\t\t\t\t// If some propertiy is null, so it will be deleted from data\n\t\t\t\t\t\t\t\t\t\t\t// this.updateRoomDevices();\n\t\t\t\t\t\t\t\t\t\t\tconsole.debug(field);\n\t\t\t\t\t\t\t\t\t\t\tconsole.debug(data);\n\t\t\t\t\t\t\t\t\t\t\tconsole.debug(onDataChange);\n\t\t\t\t\t\t\t\t\t\t\tconsole.debug(socket);\n\t\t\t\t\t\t\t\t\t\t\t// console.debug(widgetID);\n\t\t\t\t\t\t\t\t\t\t\t// console.debug(view);\n\t\t\t\t\t\t\t\t\t\t\t// console.debug(project);\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<option value=\"\">-- Select room --</option>\n\t\t\t\t\t\t\t\t\t\t{Object.entries(roomList).map(([key, val]) => {\n\t\t\t\t\t\t\t\t\t\t\treturn <option value={key}>{val}</option>;\n\t\t\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t// check here all possible types https://github.com/ioBroker/ioBroker.vis/blob/react/src/src/Attributes/Widget/SCHEMA.md\n\t\t\t],\n\t\t\tvisPrev: \"widgets/vis-2-shelly/vis2/img/editor/allDevices.png\",\n\t\t};\n\t}\n\n\t// eslint-disable-next-line class-methods-use-this\n\tasync propertiesUpdate() {\n\t\t// Widget has 3 important states\n\t\t// 1. this.state.values - contains all state values, that are used in widget (automatically collected from widget info).\n\t\t//                        So you can use `this.state.values[this.state.rxData.oid + '.val']` to get value of state with id this.state.rxData.oid\n\t\t// 2. this.state.rxData - contains all widget data with replaced bindings. E.g. if this.state.data.type is `{system.adapter.admin.0.alive}`,\n\t\t//                        then this.state.rxData.type will have state value of `system.adapter.admin.0.alive`\n\t\t// 3. this.state.rxStyle - contains all widget styles with replaced bindings. E.g. if this.state.styles.width is `{javascript.0.width}px`,\n\t\t//                        then this.state.rxData.type will have state value of `javascript.0.width` + 'px\n\t\tthis.updateRoomDevices();\n\t}\n\n\tasync updateRoomDevices() {\n\t\tthis.state.roomDevices = {};\n\t\tif (typeof this.state.data.rooms !== \"undefined\") {\n\t\t\tObject.entries(this.state.allDevices).forEach(([key, device]) => {\n\t\t\t\tif (device.room === this.state.data.rooms) {\n\t\t\t\t\tthis.state.roomDevices[key] = device;\n\t\t\t\t}\n\t\t\t});\n\t\t\tthis.forceUpdate();\n\t\t}\n\t}\n\n\tasync componentDidMount() {\n\t\tsuper.componentDidMount();\n\t\tif (typeof this.props.context.socket.states.roomList === \"undefined\") {\n\t\t\tthis.props.context.socket.subscribeState([\"vis-2-shelly.0.devices.roomIds\"], (id, state) => {\n\t\t\t\tthis.state.rooms = JSON.parse(state.val);\n\t\t\t\tthis.props.context.socket.states.roomList = this.state.rooms;\n\t\t\t});\n\t\t}\n\t\tthis.props.context.socket.subscribeState([\"vis-2-shelly.0.devices.ids\"], (id, state) => {\n\t\t\tthis.state.allDevices = JSON.parse(state.val);\n\t\t\tthis.updateRoomDevices();\n\t\t\tthis.forceUpdate();\n\t\t});\n\n\t\t// Update data\n\t\tawait this.propertiesUpdate();\n\t}\n\n\t// Do not delete this method. It is used by vis to read the widget configuration.\n\t// eslint-disable-next-line class-methods-use-this\n\tgetWidgetInfo() {\n\t\treturn ShellyByRoomDevices.getWidgetInfo();\n\t}\n\n\t// This function is called every time when rxData is changed\n\tasync onRxDataChanged() {\n\t\tconsole.debug(\"onRxDataChanged\");\n\t\tawait this.propertiesUpdate();\n\t}\n\n\t// This function is called every time when rxStyle is changed\n\t// eslint-disable-next-line class-methods-use-this\n\tasync onRxStyleChanged() {}\n\n\t// This function is called every time when some Object State updated, but all changes lands into this.state.values too\n\t// eslint-disable-next-line class-methods-use-this, no-unused-vars\n\tasync onStateUpdated(id, state) {}\n\n\trenderWidgetBody(props) {\n\t\tsuper.renderWidgetBody(props);\n\t\tconsole.debug(\"room devices\");\n\t\tconsole.debug(this.state.roomDevices);\n\t\treturn (\n\t\t\t<Card style={{ width: \"100%\", height: \"100%\" }}>\n\t\t\t\t<CardContent>\n\t\t\t\t\t{Object.values(this.state.roomDevices).map((device) => {\n\t\t\t\t\t\tthis.vsID = `vis-2-shelly.${device.instance}.devices.${device.id}`;\n\t\t\t\t\t\tthis.domID = device.id.replaceAll(\"#\", \"\");\n\t\t\t\t\t\tconst typeConfig = getDeviceConfigByType(\n\t\t\t\t\t\t\tdevice.type,\n\t\t\t\t\t\t\tthis.domID,\n\t\t\t\t\t\t\t{ stateID: device.stateId, type: device.type, id: device.id },\n\t\t\t\t\t\t\tthis.vsID,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\ttypeof typeConfig.dataPoint !== \"undefined\" &&\n\t\t\t\t\t\t\ttypeof typeConfig.dataPoint[device.relay] !== \"undefined\"\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tconst deviceDomID = typeConfig.domID + device.relay;\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<Device\n\t\t\t\t\t\t\t\t\tstateID={device.stateId}\n\t\t\t\t\t\t\t\t\ttype={device.type}\n\t\t\t\t\t\t\t\t\tid={device.id}\n\t\t\t\t\t\t\t\t\ttypeConfig={typeConfig}\n\t\t\t\t\t\t\t\t\tdeviceDomID={deviceDomID}\n\t\t\t\t\t\t\t\t\trelay={device.relay}\n\t\t\t\t\t\t\t\t\tstate={this.state}\n\t\t\t\t\t\t\t\t\tdataPoint={typeConfig.dataPoint[device.relay]}\n\t\t\t\t\t\t\t\t\tsocket={this.props.context.socket}\n\t\t\t\t\t\t\t\t\twidID={this.props.id}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t})}\n\t\t\t\t</CardContent>\n\t\t\t</Card>\n\t\t);\n\t}\n}\n\nexport default ShellyByRoomDevices;\n","import React from \"react\";\nimport { Card, CardContent, TextField, Select, Option } from \"@mui/material\";\n\nimport { I18n, ObjectBrowser } from \"@iobroker/adapter-react-v5\";\nimport { VisRxWidget } from \"@iobroker/vis-2-widgets-react-dev\";\nimport Device from \"./components/Device\";\nimport getDeviceConfigByType from \"./components/DeviceConfig\";\n\nclass ShellyCustomDeviceList extends (window.visRxWidget || VisRxWidget) {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\t// props.myContainer = useRef(null);\n\t\tthis.state.allDevices = {};\n\t\tthis.state.deviceList = {};\n\t\tconsole.debug(\"THIS DEVICES\");\n\t\tconsole.debug(this);\n\t}\n\n\tstatic getWidgetInfo() {\n\t\treturn {\n\t\t\tid: \"tplCustomDeviceListWidget\",\n\t\t\tvisSet: \"vis-2-shelly\",\n\t\t\tvisSetLabel: \"vis_2_widgets_shelly\", // Widget set translated label (should be defined only in one widget of set)\n\t\t\tvisSetColor: \"#cf00ff\", // Color of widget set. it is enough to set color only in one widget of set\n\t\t\tvisName: \"CustomDeviceList\", // Name of widget\n\t\t\tvisAttrs: [\n\t\t\t\t{\n\t\t\t\t\tname: \"common\", // group name\n\t\t\t\t\tfields: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: \"display\", // name in data structure\n\t\t\t\t\t\t\tlabel: \"vis_2_widgets_shelly_display\", // translated field label\n\t\t\t\t\t\t\ttype: \"select\",\n\t\t\t\t\t\t\toptions: [\n\t\t\t\t\t\t\t\t{ value: \"block\", label: \"block\" },\n\t\t\t\t\t\t\t\t{ value: \"flex\", label: \"flex\" },\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\tnoTranslation: true,\n\t\t\t\t\t\t\tdefault: \"block\",\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: \"count\",\n\t\t\t\t\t\t\ttype: \"number\",\n\t\t\t\t\t\t\tdefault: 1,\n\t\t\t\t\t\t\tlabel: \"vis_2_widgets_shelly_device_count\",\n\t\t\t\t\t\t\tonChange: (field, data, changeData) => changeData(data),\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: \"devices\", // name of custom group\n\t\t\t\t\tlabel: \"vis_2_widgets_shelly_group_devices\", // label of custom group\n\t\t\t\t\tindexFrom: 1, // optional start index of iterator\n\t\t\t\t\tindexTo: \"count\",\n\t\t\t\t\tfields: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: \"device\",\n\t\t\t\t\t\t\tlabel: \"vis_2_widgets_shelly_device\",\n\t\t\t\t\t\t\ttype: \"custom\",\n\t\t\t\t\t\t\tcomponent: (field, data, onDataChange, socket, widgetID, view, project) => {\n\t\t\t\t\t\t\t\tconst deviceList =\n\t\t\t\t\t\t\t\t\ttypeof socket.context.socket.states.deviceList !== \"undefined\"\n\t\t\t\t\t\t\t\t\t\t? socket.context.socket.states.deviceList\n\t\t\t\t\t\t\t\t\t\t: {};\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<select\n\t\t\t\t\t\t\t\t\t\tname=\"ShellyDeviceList_DeviceSelect\"\n\t\t\t\t\t\t\t\t\t\tstyle={{ width: \"100%\" }}\n\t\t\t\t\t\t\t\t\t\tvalue={data[field.name]}\n\t\t\t\t\t\t\t\t\t\tonChange={(e) => {\n\t\t\t\t\t\t\t\t\t\t\tonDataChange({ [field.name]: e.target.value });\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<option value=\"\">-- Select device --</option>\n\t\t\t\t\t\t\t\t\t\t{Object.entries(deviceList).map(([key, val]) => {\n\t\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t\t<option value={key}>\n\t\t\t\t\t\t\t\t\t\t\t\t\t{val.name !== null && val.name.length > 0 ? val.name : val.id}\n\t\t\t\t\t\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t// check here all possible types https://github.com/ioBroker/ioBroker.vis/blob/react/src/src/Attributes/Widget/SCHEMA.md\n\t\t\t],\n\t\t\tvisPrev: \"widgets/vis-2-shelly/vis2/img/editor/allDevices.png\",\n\t\t};\n\t}\n\n\t// eslint-disable-next-line class-methods-use-this\n\tasync propertiesUpdate() {\n\t\t// Widget has 3 important states\n\t\t// 1. this.state.values - contains all state values, that are used in widget (automatically collected from widget info).\n\t\t//                        So you can use `this.state.values[this.state.rxData.oid + '.val']` to get value of state with id this.state.rxData.oid\n\t\t// 2. this.state.rxData - contains all widget data with replaced bindings. E.g. if this.state.data.type is `{system.adapter.admin.0.alive}`,\n\t\t//                        then this.state.rxData.type will have state value of `system.adapter.admin.0.alive`\n\t\t// 3. this.state.rxStyle - contains all widget styles with replaced bindings. E.g. if this.state.styles.width is `{javascript.0.width}px`,\n\t\t//                        then this.state.rxData.type will have state value of `javascript.0.width` + 'px\n\t\tthis.updateDeviceList();\n\t}\n\n\tasync updateDeviceList() {\n\t\tthis.state.deviceList = {};\n\t\tfor (let count = 1; count <= this.state.data.count; count++) {\n\t\t\tif (\n\t\t\t\ttypeof this.state.data[`device${count}`] !== \"undefined\" &&\n\t\t\t\ttypeof this.state.allDevices[this.state.data[`device${count}`]] !== \"undefined\"\n\t\t\t) {\n\t\t\t\tthis.state.deviceList[count] = this.state.allDevices[this.state.data[`device${count}`]];\n\t\t\t}\n\t\t}\n\t\tthis.forceUpdate();\n\t}\n\n\tasync componentDidMount() {\n\t\tsuper.componentDidMount();\n\t\tthis.props.context.socket.subscribeState([\"vis-2-shelly.0.devices.ids\"], (id, state) => {\n\t\t\tthis.state.allDevices = JSON.parse(state.val);\n\t\t\tthis.props.context.socket.states.deviceList = this.state.allDevices;\n\t\t\tthis.updateDeviceList();\n\t\t\tthis.forceUpdate();\n\t\t});\n\n\t\t// Update data\n\t\tawait this.propertiesUpdate();\n\t}\n\n\t// Do not delete this method. It is used by vis to read the widget configuration.\n\t// eslint-disable-next-line class-methods-use-this\n\tgetWidgetInfo() {\n\t\treturn ShellyCustomDeviceList.getWidgetInfo();\n\t}\n\n\t// This function is called every time when rxData is changed\n\tasync onRxDataChanged() {\n\t\tconsole.debug(\"onRxDataChanged\");\n\t\tawait this.propertiesUpdate();\n\t}\n\n\t// This function is called every time when rxStyle is changed\n\t// eslint-disable-next-line class-methods-use-this\n\tasync onRxStyleChanged() {}\n\n\t// This function is called every time when some Object State updated, but all changes lands into this.state.values too\n\t// eslint-disable-next-line class-methods-use-this, no-unused-vars\n\tasync onStateUpdated(id, state) {}\n\n\trenderWidgetBody(props) {\n\t\tsuper.renderWidgetBody(props);\n\t\treturn (\n\t\t\t<Card style={{ width: \"100%\", height: \"100%\" }}>\n\t\t\t\t<CardContent>\n\t\t\t\t\t{Object.values(this.state.deviceList).map((device) => {\n\t\t\t\t\t\tthis.vsID = `vis-2-shelly.${device.instance}.devices.${device.id}`;\n\t\t\t\t\t\tthis.domID = device.id.replaceAll(\"#\", \"\");\n\t\t\t\t\t\tconst typeConfig = getDeviceConfigByType(\n\t\t\t\t\t\t\tdevice.type,\n\t\t\t\t\t\t\tthis.domID,\n\t\t\t\t\t\t\t{ stateID: device.stateId, type: device.type, id: device.id },\n\t\t\t\t\t\t\tthis.vsID,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\ttypeof typeConfig.dataPoint !== \"undefined\" &&\n\t\t\t\t\t\t\ttypeof typeConfig.dataPoint[device.relay] !== \"undefined\"\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tconst deviceDomID = typeConfig.domID + device.relay;\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<Device\n\t\t\t\t\t\t\t\t\tstateID={device.stateId}\n\t\t\t\t\t\t\t\t\ttype={device.type}\n\t\t\t\t\t\t\t\t\tid={device.id}\n\t\t\t\t\t\t\t\t\ttypeConfig={typeConfig}\n\t\t\t\t\t\t\t\t\tdeviceDomID={deviceDomID}\n\t\t\t\t\t\t\t\t\trelay={device.relay}\n\t\t\t\t\t\t\t\t\tstate={this.state}\n\t\t\t\t\t\t\t\t\tdataPoint={typeConfig.dataPoint[device.relay]}\n\t\t\t\t\t\t\t\t\tsocket={this.props.context.socket}\n\t\t\t\t\t\t\t\t\twidID={this.props.id}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t})}\n\t\t\t\t</CardContent>\n\t\t\t</Card>\n\t\t);\n\t}\n}\n\nexport default ShellyCustomDeviceList;\n","const translations = {\n    en: require('./i18n/en.json'),\n    de: require('./i18n/de.json'),\n    ru: require('./i18n/ru.json'),\n    pt: require('./i18n/pt.json'),\n    nl: require('./i18n/nl.json'),\n    fr: require('./i18n/fr.json'),\n    it: require('./i18n/it.json'),\n    es: require('./i18n/es.json'),\n    pl: require('./i18n/pl.json'),\n    'zh-cn': require('./i18n/zh-cn.json'),\n};\n\nexport default translations;\n","import React from \"react\";\nimport { withStyles } from \"@mui/styles\";\n\nimport WidgetDemoApp from \"@iobroker/vis-2-widgets-react-dev/widgetDemoApp\";\nimport { i18n as I18n } from \"@iobroker/adapter-react-v5\";\n\nimport { Checkbox, TextField } from \"@mui/material\";\nimport AllDevicesWidget from \"./ShellyAllDevices\";\nimport ByRoomDevicesWidget from \"./ShellyByRoomDevices\";\nimport CustomDeviceListWidget from \"./ShellyCustomDeviceList\";\nimport translations from \"./translations\";\n// import css from \"./style.css\";\n\nconst styles = (theme) => ({\n\tapp: {},\n});\nclass App extends WidgetDemoApp {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\t// var t=await(async function(){return(await getState(\"\")).val;}\n\t\t// init translations\n\t\tI18n.extendTranslations(translations);\n\t\tthis.socket.registerConnectionHandler(this.onConnectionChanged);\n\t}\n\n\tonConnectionChanged = (isConnected) => {\n\t\tif (isConnected) {\n\t\t\tthis.socket.getSystemConfig().then((systemConfig) => this.setState({ systemConfig }));\n\t\t}\n\t};\n\n\trenderWidget() {\n\t\tconst widgets = {\n\t\t\tallDevices: AllDevicesWidget.getWidgetInfo(),\n\t\t\troomDevices: ByRoomDevicesWidget.getWidgetInfo(),\n\t\t\tcustomDeviceList: CustomDeviceListWidget.getWidgetInfo(),\n\t\t};\n\n\t\treturn (\n\t\t\t<div className={this.props.classes.app}>\n\t\t\t\t<div>\n\t\t\t\t\t{Object.keys(widgets).map((key) => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<div key={key} style={{ display: \"flex\", alignItems: \"center\" }}>\n\t\t\t\t\t\t\t\t{/* <Checkbox\n\t\t\t\t\t\t\t\tchecked={!this.state.disabled[key]}\n\t\t\t\t\t\t\t\tonChange={(e) => {\n\t\t\t\t\t\t\t\t\tconst disabled = JSON.parse(JSON.stringify(this.state.disabled));\n\t\t\t\t\t\t\t\t\tdisabled[key] = !e.target.checked;\n\t\t\t\t\t\t\t\t\twindow.localStorage.setItem(\"disabled\", JSON.stringify(disabled));\n\t\t\t\t\t\t\t\t\t// this.setState({ disabled });\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t/> */}\n\t\t\t\t\t\t\t\t{key}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t);\n\t\t\t\t\t})}\n\t\t\t\t</div>\n\t\t\t\t{/* {Object.keys(widgets).map((key) => (this.state.disabled[key] ? null : widgets[key]))} */}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default withStyles(styles)(App);\n","import bootstrap from '@iobroker/vis-2-widgets-react-dev/bootstrap';\nimport App from './App';\n\nbootstrap(App);\n"],"names":["ShellyAllDevices","window","visRxWidget","VisRxWidget","constructor","props","super","this","state","allDevices","showDeviceDialog","console","debug","getWidgetInfo","id","visSet","visSetLabel","visSetColor","visName","visAttrs","name","fields","label","type","options","value","noTranslation","default","visPrev","propertiesUpdate","componentDidMount","context","socket","subscribeState","JSON","parse","val","forceUpdate","onRxDataChanged","onRxStyleChanged","onStateUpdated","showDeviceOptions","setState","hideDeviceOptions","renderWidgetBody","_jsxs","Card","style","width","height","children","_jsx","CardContent","Object","values","map","device","vsID","concat","instance","domID","replaceAll","typeConfig","getDeviceConfigByType","stateID","stateId","dataPoint","relay","deviceDomID","Device","widID","parentThis","ShellyByRoomDevices","roomDevices","component","field","data","onDataChange","widgetID","view","project","roomList","states","onChange","e","target","entries","_ref","key","updateRoomDevices","rooms","forEach","_ref2","room","ShellyCustomDeviceList","deviceList","changeData","indexFrom","indexTo","length","updateDeviceList","count","en","require","de","ru","pt","nl","fr","it","es","pl","App","WidgetDemoApp","onConnectionChanged","isConnected","getSystemConfig","then","systemConfig","I18n","extendTranslations","translations","registerConnectionHandler","renderWidget","widgets","AllDevicesWidget","ByRoomDevicesWidget","customDeviceList","CustomDeviceListWidget","className","classes","app","keys","display","alignItems","withStyles","theme","bootstrap"],"sourceRoot":""}