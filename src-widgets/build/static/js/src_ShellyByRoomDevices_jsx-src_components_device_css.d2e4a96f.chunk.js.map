{"version":3,"file":"static/js/src_ShellyByRoomDevices_jsx-src_components_device_css.d2e4a96f.chunk.js","mappings":"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","sources":["ShellyByRoomDevices.jsx","../node_modules/react/cjs/react-jsx-runtime.production.min.js","../node_modules/react/jsx-runtime.js"],"sourcesContent":["import React from \"react\";\nimport { Card, CardContent, TextField, Select, Option } from \"@mui/material\";\n\nimport { I18n, ObjectBrowser } from \"@iobroker/adapter-react-v5\";\nimport { VisRxWidget } from \"@iobroker/vis-2-widgets-react-dev\";\nimport Device from \"./components/Device\";\nimport getDeviceConfigByType from \"./components/DeviceConfig\";\n\nclass ShellyByRoomDevices extends (window.visRxWidget || VisRxWidget) {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\t// props.myContainer = useRef(null);\n\t\tthis.state.allDevices = {};\n\t\tthis.state.roomDevices = {};\n\t\tconsole.debug(\"THIS ROOM\");\n\t\tconsole.debug(this);\n\t}\n\n\tstatic getWidgetInfo() {\n\t\treturn {\n\t\t\tid: \"tplByRoomDevicesWidget\",\n\t\t\tvisSet: \"vis-2-shelly\",\n\t\t\tvisSetLabel: \"vis_2_widgets_shelly\", // Widget set translated label (should be defined only in one widget of set)\n\t\t\tvisSetColor: \"#cf00ff\", // Color of widget set. it is enough to set color only in one widget of set\n\t\t\tvisName: \"ByRoomDevices\", // Name of widget\n\t\t\tvisAttrs: [\n\t\t\t\t{\n\t\t\t\t\tname: \"common\", // group name\n\t\t\t\t\tfields: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: \"display\", // name in data structure\n\t\t\t\t\t\t\tlabel: \"vis_2_widgets_shelly_display\", // translated field label\n\t\t\t\t\t\t\ttype: \"select\",\n\t\t\t\t\t\t\toptions: [\n\t\t\t\t\t\t\t\t{ value: \"block\", label: \"block\" },\n\t\t\t\t\t\t\t\t{ value: \"flex\", label: \"flex\" },\n\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\tnoTranslation: true,\n\t\t\t\t\t\t\tdefault: \"block\",\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: \"rooms\",\n\t\t\t\t\t\t\tlabel: \"vis_2_widgets_shelly_rooms\",\n\t\t\t\t\t\t\ttype: \"custom\",\n\t\t\t\t\t\t\tcomponent: (field, data, onDataChange, socket, widgetID, view, project) => {\n\t\t\t\t\t\t\t\t// console.debug(\"Component\");\n\t\t\t\t\t\t\t\t// console.debug(this);\n\t\t\t\t\t\t\t\t// console.debug(field);\n\t\t\t\t\t\t\t\t// console.debug(\"DATA\");\n\t\t\t\t\t\t\t\t// console.debug(data);\n\t\t\t\t\t\t\t\t// console.debug(socket);\n\t\t\t\t\t\t\t\tconst roomList =\n\t\t\t\t\t\t\t\t\ttypeof socket.context.socket.states.roomList !== \"undefined\"\n\t\t\t\t\t\t\t\t\t\t? socket.context.socket.states.roomList\n\t\t\t\t\t\t\t\t\t\t: {};\n\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t<select\n\t\t\t\t\t\t\t\t\t\t// id={`${widgetID}_ShellyRoomSelect`}\n\t\t\t\t\t\t\t\t\t\tname=\"ShellyByRoom_RoomSelect\"\n\t\t\t\t\t\t\t\t\t\tstyle={{ width: \"100%\" }}\n\t\t\t\t\t\t\t\t\t\tvalue={data[field.name]}\n\t\t\t\t\t\t\t\t\t\tonChange={(e) => {\n\t\t\t\t\t\t\t\t\t\t\tonDataChange({ [field.name]: e.target.value }); // returns all changed field as object.\n\t\t\t\t\t\t\t\t\t\t\t// If some propertiy is null, so it will be deleted from data\n\t\t\t\t\t\t\t\t\t\t\t// this.updateRoomDevices();\n\t\t\t\t\t\t\t\t\t\t\tconsole.debug(field);\n\t\t\t\t\t\t\t\t\t\t\tconsole.debug(data);\n\t\t\t\t\t\t\t\t\t\t\tconsole.debug(onDataChange);\n\t\t\t\t\t\t\t\t\t\t\tconsole.debug(socket);\n\t\t\t\t\t\t\t\t\t\t\t// console.debug(widgetID);\n\t\t\t\t\t\t\t\t\t\t\t// console.debug(view);\n\t\t\t\t\t\t\t\t\t\t\t// console.debug(project);\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t<option value=\"\">-- Select room --</option>\n\t\t\t\t\t\t\t\t\t\t{Object.entries(roomList).map(([key, val]) => {\n\t\t\t\t\t\t\t\t\t\t\treturn <option value={key}>{val}</option>;\n\t\t\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t],\n\t\t\t\t},\n\t\t\t\t// check here all possible types https://github.com/ioBroker/ioBroker.vis/blob/react/src/src/Attributes/Widget/SCHEMA.md\n\t\t\t],\n\t\t\tvisPrev: \"widgets/vis-2-shelly/vis2/img/editor/allDevices.png\",\n\t\t};\n\t}\n\n\t// eslint-disable-next-line class-methods-use-this\n\tasync propertiesUpdate() {\n\t\t// Widget has 3 important states\n\t\t// 1. this.state.values - contains all state values, that are used in widget (automatically collected from widget info).\n\t\t//                        So you can use `this.state.values[this.state.rxData.oid + '.val']` to get value of state with id this.state.rxData.oid\n\t\t// 2. this.state.rxData - contains all widget data with replaced bindings. E.g. if this.state.data.type is `{system.adapter.admin.0.alive}`,\n\t\t//                        then this.state.rxData.type will have state value of `system.adapter.admin.0.alive`\n\t\t// 3. this.state.rxStyle - contains all widget styles with replaced bindings. E.g. if this.state.styles.width is `{javascript.0.width}px`,\n\t\t//                        then this.state.rxData.type will have state value of `javascript.0.width` + 'px\n\t\tthis.updateRoomDevices();\n\t}\n\n\tasync updateRoomDevices() {\n\t\tthis.state.roomDevices = {};\n\t\tif (typeof this.state.data.rooms !== \"undefined\") {\n\t\t\tObject.entries(this.state.allDevices).forEach(([key, device]) => {\n\t\t\t\tif (device.room === this.state.data.rooms) {\n\t\t\t\t\tthis.state.roomDevices[key] = device;\n\t\t\t\t}\n\t\t\t});\n\t\t\tthis.updateTypeConfig(this.state.roomDevices);\n\t\t}\n\t}\n\n\tasync updateTypeConfig(devices) {\n\t\tthis.state.typeConfig = {};\n\t\tfor (const key in devices) {\n\t\t\tconst device = devices[key];\n\t\t\tthis.vsID = `vis-2-shelly.${device.instance}.devices.${device.id}`;\n\t\t\tthis.domID = device.id.replaceAll(\"#\", \"\");\n\n\t\t\t// console.log(key);\n\t\t\tdevices[key].typeConfig = await getDeviceConfigByType(\n\t\t\t\tdevice.type,\n\t\t\t\tthis.domID,\n\t\t\t\t{\n\t\t\t\t\tstateID: device.stateId,\n\t\t\t\t\ttype: device.type,\n\t\t\t\t\tid: device.id,\n\t\t\t\t\tsocket: this.props.context.socket,\n\t\t\t\t},\n\t\t\t\tthis.vsID,\n\t\t\t);\n\t\t}\n\t\tthis.state.allDevices = devices;\n\t\tthis.setState({ roomDevices: devices });\n\t\tthis.forceUpdate();\n\t}\n\n\tasync componentDidMount() {\n\t\tsuper.componentDidMount();\n\t\tif (typeof this.props.context.socket.states.roomList === \"undefined\") {\n\t\t\tthis.props.context.socket.subscribeState([\"vis-2-shelly.0.devices.roomIds\"], (id, state) => {\n\t\t\t\tthis.state.rooms = JSON.parse(state.val);\n\t\t\t\tthis.props.context.socket.states.roomList = this.state.rooms;\n\t\t\t});\n\t\t}\n\t\tthis.props.context.socket.subscribeState([\"vis-2-shelly.0.devices.ids\"], (id, state) => {\n\t\t\tthis.state.allDevices = JSON.parse(state.val);\n\t\t\tthis.updateRoomDevices();\n\t\t\tthis.forceUpdate();\n\t\t});\n\n\t\t// Update data\n\t\tawait this.propertiesUpdate();\n\t}\n\n\t// Do not delete this method. It is used by vis to read the widget configuration.\n\t// eslint-disable-next-line class-methods-use-this\n\tgetWidgetInfo() {\n\t\treturn ShellyByRoomDevices.getWidgetInfo();\n\t}\n\n\t// This function is called every time when rxData is changed\n\tasync onRxDataChanged() {\n\t\tconsole.debug(\"onRxDataChanged\");\n\t\tawait this.propertiesUpdate();\n\t}\n\n\t// This function is called every time when rxStyle is changed\n\t// eslint-disable-next-line class-methods-use-this\n\tasync onRxStyleChanged() {}\n\n\t// This function is called every time when some Object State updated, but all changes lands into this.state.values too\n\t// eslint-disable-next-line class-methods-use-this, no-unused-vars\n\tasync onStateUpdated(id, state) {}\n\n\trenderWidgetBody(props) {\n\t\tsuper.renderWidgetBody(props);\n\t\tconsole.debug(\"room devices\");\n\t\tconsole.debug(this.state.roomDevices);\n\t\treturn (\n\t\t\t<Card style={{ width: \"100%\", height: \"100%\" }}>\n\t\t\t\t<CardContent>\n\t\t\t\t\t{Object.values(this.state.roomDevices).map((device) => {\n\t\t\t\t\t\tthis.vsID = `vis-2-shelly.${device.instance}.devices.${device.id}`;\n\t\t\t\t\t\tthis.domID = device.id.replaceAll(\"#\", \"\");\n\t\t\t\t\t\tconst typeConfig = device.typeConfig;\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\ttypeof typeConfig !== \"undefined\" &&\n\t\t\t\t\t\t\ttypeof typeConfig.dataPoint !== \"undefined\" &&\n\t\t\t\t\t\t\ttypeof typeConfig.dataPoint[device.relay] !== \"undefined\"\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tconst deviceDomID = typeConfig.domID + device.relay;\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<Device\n\t\t\t\t\t\t\t\t\tstateID={device.stateId}\n\t\t\t\t\t\t\t\t\ttype={device.type}\n\t\t\t\t\t\t\t\t\tid={device.id}\n\t\t\t\t\t\t\t\t\ttypeConfig={typeConfig}\n\t\t\t\t\t\t\t\t\tdeviceDomID={deviceDomID}\n\t\t\t\t\t\t\t\t\trelay={device.relay}\n\t\t\t\t\t\t\t\t\tstate={this.state}\n\t\t\t\t\t\t\t\t\tdataPoint={typeConfig.dataPoint[device.relay]}\n\t\t\t\t\t\t\t\t\tsocket={this.props.context.socket}\n\t\t\t\t\t\t\t\t\twidID={this.props.id}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t})}\n\t\t\t\t</CardContent>\n\t\t\t</Card>\n\t\t);\n\t}\n}\n\nexport default ShellyByRoomDevices;\n","/**\n * @license React\n * react-jsx-runtime.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var f=require(\"react\"),k=Symbol.for(\"react.element\"),l=Symbol.for(\"react.fragment\"),m=Object.prototype.hasOwnProperty,n=f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,p={key:!0,ref:!0,__self:!0,__source:!0};\nfunction q(c,a,g){var b,d={},e=null,h=null;void 0!==g&&(e=\"\"+g);void 0!==a.key&&(e=\"\"+a.key);void 0!==a.ref&&(h=a.ref);for(b in a)m.call(a,b)&&!p.hasOwnProperty(b)&&(d[b]=a[b]);if(c&&c.defaultProps)for(b in a=c.defaultProps,a)void 0===d[b]&&(d[b]=a[b]);return{$$typeof:k,type:c,key:e,ref:h,props:d,_owner:n.current}}exports.Fragment=l;exports.jsx=q;exports.jsxs=q;\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-jsx-runtime.production.min.js');\n} else {\n  module.exports = require('./cjs/react-jsx-runtime.development.js');\n}\n"],"names":["ShellyByRoomDevices","window","visRxWidget","VisRxWidget","constructor","props","super","this","state","allDevices","roomDevices","console","debug","getWidgetInfo","id","visSet","visSetLabel","visSetColor","visName","visAttrs","name","fields","label","type","options","value","noTranslation","default","component","field","data","onDataChange","socket","widgetID","view","project","roomList","context","states","_jsxs","style","width","onChange","e","target","children","_jsx","Object","entries","map","_ref","key","val","visPrev","propertiesUpdate","updateRoomDevices","rooms","forEach","_ref2","device","room","updateTypeConfig","devices","typeConfig","vsID","concat","instance","domID","replaceAll","getDeviceConfigByType","stateID","stateId","setState","forceUpdate","componentDidMount","subscribeState","JSON","parse","onRxDataChanged","onRxStyleChanged","onStateUpdated","renderWidgetBody","Card","height","CardContent","values","dataPoint","relay","deviceDomID","Device","widID","f","require","k","Symbol","for","l","m","prototype","hasOwnProperty","n","__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED","ReactCurrentOwner","p","ref","__self","__source","q","c","a","g","b","d","h","call","defaultProps","$$typeof","_owner","current","exports","Fragment","jsx","jsxs","module"],"sourceRoot":""}